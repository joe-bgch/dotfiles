[core]
    excludesfile = ~/.gitignore_global
    editor = vim

[user]
    name = "David Bagonyi"

[color]
    ui = true

[alias]
    unpushed = "log --branches --not --remotes  --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset  %s %Cgreen(%cr) %C(bold blue)%Creset' --abbrev-commit"
    ec = config --global -e
    contains = "!f() { echo 'Branches'; git --no-pager branch --all --contains ${1-HEAD}; echo 'Tags'; git --no-pager tag --contains ${1-HEAD}; }; f"
    s = status
    st = status -sb
    ci = commit
    br = branch -vv
    co = checkout
    aa = add -A
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    cp = cherry-pick
    alias = config --get-regexp ^alias\\.
    hr = !echo --------------------------------------------------------------------------------
    # short log with tags
    logtags = log --no-walk --tags --pretty='%h %d %s' --decorate=full
    # undoable git reset --hard
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
    # recursive git status -s
    rs = "!f() { find . -name '.git' -type d | while read dir ; do echo \"$dir\" | sed -e \"s/\\.git$//\"; sh -c \"cd $dir/../ && git status -s\"; echo; done }; f"
    # recursive git status -sb
    rsb = "!f() { find . -name '.git' -type d | while read dir ; do echo \"$dir\" | sed -e \"s/\\.git$//\"; sh -c \"cd $dir/../ && git status -sb\"; echo; done }; f"
    # recursive git diff
    rdiff = "!f() { find . -name '.git' -type d | while read dir ; do echo \"$dir\" | sed -e \"s/\\.git$//\"; sh -c \"cd $dir/../ && git status -sb && echo && git --no-pager diff $@\"; git hr; echo; done }; f"
    # recursive git diff + git diff --cached
    rdiffall = "!f() { find . -name '.git' -type d | while read dir ; do echo \"$dir\" | sed -e \"s/\\.git$//\"; sh -c \"cd $dir/../ && git status -sb && echo && git --no-pager diff $@ && git --no-pager diff --cached $@\"; git hr; echo; done }; f"
    # recursive git log
    rlog = "!f() { find . -name '.git' -type d | while read dir ; do echo \"$dir\" | sed -e \"s/\\.git$//\"; sh -c \"cd $dir/../ && git --no-pager lg -10 $@\"; echo; echo; done }; f"
    # recursive git fetch
    rfetch = "!f() { find . -name '.git' -type d | while read dir ; do echo \"$dir\" | sed -e \"s/\\.git$//\"; sh -c \"cd $dir/../ && git fetch\"; echo; echo; done }; f"
    # recursive git branch search
    rbs = "!f() { find . -name '.git' -type d | while read dir ; do echo \"$dir\" | sed -e \"s/\\.git$//\"; sh -c \"cd $dir/../ && git branch -a | grep -i $@\"; echo; echo; done }; f"
    # show the toplevel dir
    path = rev-parse --show-toplevel
    # print current branch
    cb = rev-parse --abbrev-ref HEAD

    # recursive git stash
    rstash = "!f() { \
        local STASHMSG=$(shuf -i 1000000-9999999 -n 1); \
        find . -name '.git' -type d | while read dir ; do \
            echo \"\\033[33;32m$dir\\033[0m\" | sed -e \"s/\\.git$//\" ; \
            sh -c \"cd $dir/../ && git stash save -u $STASHMSG\"; \
            echo; \
            echo; \
        done; \
        echo \"Stash message $STASHMSG\"; \
    }; f"

    # recursive git stash search
    rstashs = "!f() { \
        if [ -z "$1" ]; then echo "Usage: git rstashs STASH-REF"; exit 1; fi; \
        find . -name '.git' -type d | while read dir ; do \
            sh -c \"cd $dir/../ && git --no-pager stash list | grep --colour -i $1 && echo \"$dir\" | sed -e \"s/\\.git$//\" && echo\"; \
        done; \
    }; f"

    # recursive git stash list
    rstashlist = "!f() { \
        find . -name '.git' -type d | while read dir ; do \
            WORKDIR=$(echo $dir | sed -e \"s/\\.git$//\"); \
            if [ $(git -C $WORKDIR --no-pager stash list | wc -l) -ne 0 ]; then echo \"\\033[33;32m$WORKDIR\\033[0m\"; git -C $WORKDIR --no-pager stash list; echo; git hr; echo; fi; \
        done; \
    }; f"

    # recursive git stash pop
    rstashpop = "!f() { \
        if [ -z "$1" ]; then echo "Usage: git rstashpop STASH-REF"; exit 1; fi; \
        OLDDIR=$(pwd); \
        find . -name '.git' -type d | while read dir ; do \
            STASHREF=0; \
            echo \"\\033[33;32m$dir\\033[0m\" | sed -e \"s/\\.git$//\" ; \
            cd $dir/../; \
            STASHREF=$(git --no-pager stash list | grep $1 | cut -d: -f1); \
            if [ -z "$STASHREF" ]; then echo Stash not found && cd $OLDDIR && continue; fi; \
            echo Stash found, popping it; \
            git stash pop $STASHREF; \
            echo; git hr; echo; \
            cd $OLDDIR; \
        done; \
    }; f"

    # recursive checkout
    rcheckout = "!f() { \
        find . -name '.git' -type d | while read dir ; do \
            WORKDIR=$(echo $dir | sed -e \"s/\\.git$//\"); \
            echo \"\\033[33;32m$WORKDIR\\033[0m\"; git -C $WORKDIR checkout $@; echo; git hr; echo; \
        done; \
    }; f"

[push]
    default = current

[include]
    path = ~/.gitconfig.local

[credential]
    # Use credential memory cache
    helper = cache --timeout=3600

[git-up "rebase"]
	log-hook = "echo \"changes on $1:\"; git --no-pager log --oneline --decorate $1..$2"

[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
